package com.jxj.CompileFfmpeg;

import android.os.AsyncTask;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

/**
 * RTSPÊí≠ÊîæÂô®Á±ª - Êèê‰æõ‰ΩéÂª∂ËøüRTSPÊµÅÊí≠ÊîæÂíåÂΩïÂà∂ÂäüËÉΩ
 */
public class RtspPlayer implements SurfaceHolder.Callback {
    private static final String TAG = "RtspPlayer";
    
    // ÈÄöËøáMainActivityËÆøÈóÆnativeÊñπÊ≥ï
    private MainActivity mainActivity;
    
    private Handler mainHandler;
    private boolean isPlaying = false;
    private boolean isRecording = false;
    private FrameProcessTask frameTask;
    private Surface surface;
    private int videoWidth = 0;
    private int videoHeight = 0;
    
    // ÂõûË∞ÉÊé•Âè£
    public interface RtspPlayerListener {
        void onStreamOpened(String streamInfo);
        void onStreamClosed();
        void onRecordingStarted();
        void onRecordingStopped();
        void onError(String error);
        void onFrameProcessed(); // ÊØèÂ§ÑÁêÜ‰∏ÄÂ∏ßÊó∂ÂõûË∞É
        void onVideoSizeChanged(int width, int height); // ËßÜÈ¢ëÂ∞∫ÂØ∏ÂèòÂåñÊó∂ÂõûË∞É
    }
    
    private RtspPlayerListener listener;
    
    public RtspPlayer() {
        mainHandler = new Handler(Looper.getMainLooper());
    }
    
    public RtspPlayer(MainActivity activity) {
        this.mainActivity = activity;
        mainHandler = new Handler(Looper.getMainLooper());
    }
    
    public void setListener(RtspPlayerListener listener) {
        this.listener = listener;
    }

    public void setSurfaceView(SurfaceView surfaceView) {
        if (surfaceView != null) {
            SurfaceHolder holder = surfaceView.getHolder();
            holder.addCallback(this);
            // ËÆæÁΩÆsurfaceÁ±ªÂûã
            holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        }
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        this.surface = holder.getSurface();
        
        if (mainActivity != null && surface != null && surface.isValid()) {
            new Handler(Looper.getMainLooper()).postDelayed(() -> {
                if (surface != null && surface.isValid()) {
                    mainActivity.setSurface(surface);
                }
            }, 50);
        }
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        Surface newSurface = holder.getSurface();
        
        if (newSurface != this.surface) {
            this.surface = newSurface;
            if (mainActivity != null && surface != null && surface.isValid()) {
                mainActivity.setSurface(surface);
            }
        }
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        if (mainActivity != null) {
            mainActivity.setSurface(null);
        }
        this.surface = null;
    }

    public void setVideoSize(int width, int height) {
        if (width != videoWidth || height != videoHeight) {
            videoWidth = width;
            videoHeight = height;
            if (listener != null) {
                listener.onVideoSizeChanged(width, height);
            }
        }
    }
    
    /**
     * ÊâìÂºÄRTSPÊµÅÔºàÊîØÊåÅ‰ΩéÂª∂ËøüÈÖçÁΩÆÔºâ
     */
    public void openStream(String rtspUrl) {
        new AsyncTask<String, Void, Boolean>() {
            @Override
            protected Boolean doInBackground(String... urls) {
                return mainActivity != null ? mainActivity.openRtspStream(urls[0]) : false;
            }
            
            @Override
            protected void onPostExecute(Boolean success) {
                if (success) {
                    String streamInfo = mainActivity != null ? mainActivity.getRtspStreamInfo() : "Êú™Áü•";
                    
                    isPlaying = true;
                    startFrameProcessing();
                    
                    if (listener != null) {
                        listener.onStreamOpened(streamInfo);
                    }
                } else {
                    if (listener != null) {
                        listener.onError("Êó†Ê≥ïÊâìÂºÄRTSPÊµÅ: " + rtspUrl);
                    }
                }
            }
        }.execute(rtspUrl);
    }
    
    /**
     * ÂºÄÂßãÂΩïÂà∂
     */
    public void startRecording(String outputPath) {
        if (!isPlaying || isRecording) {
            return;
        }
        
        // ÂàõÂª∫ÂΩïÂà∂ÁõÆÂΩïÂíåMP4Êñá‰ª∂
        java.io.File file = new java.io.File(outputPath);
        java.io.File parentDir = file.getParentFile();
        
        if (parentDir != null && !parentDir.exists()) {
            parentDir.mkdirs();
        }
        
        // ÁÆÄÂåñÊñá‰ª∂ÂàõÂª∫ÔºåËÆ©NativeÂ±ÇÂ§ÑÁêÜ
        try {
            if (file.exists()) {
                file.delete();
            }
            
            // Âè™Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®Ôºå‰∏çÈ¢ÑÂàõÂª∫Êñá‰ª∂
            // NativeÂ±Ç‰ºöÂàõÂª∫ÂíåÁÆ°ÁêÜÊñá‰ª∂
            
        } catch (Exception e) {
            Log.e(TAG, "Êñá‰ª∂ÂáÜÂ§áÂ§±Ë¥•: " + e.getMessage());
            return;
        }
        
        new Thread(() -> {
            try {
                Log.i(TAG, "üîß ÂºÄÂßãÂΩïÂà∂Á∫øÁ®ãÂêØÂä®");
                boolean success = false;
                // ÂÖàÂáÜÂ§áÂΩïÂà∂ÁéØÂ¢É
                if (mainActivity != null) {
                    Log.i(TAG, "üîß Ë∞ÉÁî®prepareRecording");
                    boolean prepared = mainActivity.prepareRecording(outputPath);
                    Log.i(TAG, "üîß prepareRecordingÁªìÊûú: " + prepared);
                    
                    if (prepared) {
                        Log.i(TAG, "üîß Ë∞ÉÁî®startRtspRecording");
                        // ÂêØÂä®ÂΩïÂà∂
                        boolean started = mainActivity.startRtspRecording(outputPath);
                        Log.i(TAG, "üîß startRtspRecordingÁªìÊûú: " + started);
                        if (started) {
                            success = true;
                        }
                    }
                } else {
                    Log.e(TAG, "üîß mainActivity‰∏∫Á©∫");
                }
                
                Log.i(TAG, "üîß ÂΩïÂà∂ÂáÜÂ§áÂÆåÊàêÔºåÁªìÊûú: " + success);
                
                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
                final boolean finalSuccess = success;
                mainHandler.post(() -> {
                    if (finalSuccess) {
                        Log.i(TAG, "üîß ÂΩïÂà∂ÂêØÂä®ÊàêÂäüÔºåÊõ¥Êñ∞Áä∂ÊÄÅ");
                        isRecording = true;
                        if (listener != null) {
                            listener.onRecordingStarted();
                        }
                    } else {
                        Log.e(TAG, "üîß ÂΩïÂà∂ÂêØÂä®Â§±Ë¥•");
                        if (listener != null) {
                            listener.onError("ÂΩïÂà∂ÂºÄÂßãÂ§±Ë¥•");
                        }
                    }
                });
                
            } catch (Exception e) {
                Log.e(TAG, "üîß ÂΩïÂà∂ÂêØÂä®ÂºÇÂ∏∏: " + e.getMessage(), e);
                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
                mainHandler.post(() -> {
                    if (listener != null) {
                        listener.onError("ÂΩïÂà∂ÂêØÂä®ÂºÇÂ∏∏: " + e.getMessage());
                    }
                });
            }
        }).start();
    }
    
    public void stopRecording() {
        Log.d(TAG, "üîß stopRecording Ë¢´Ë∞ÉÁî®ÔºåÂΩìÂâçÁä∂ÊÄÅ: " + isRecording);
        
        // ‰ΩøÁî®Thread‰ª£ÊõøAsyncTaskÔºåÊõ¥ÂèØÈù†
        new Thread(() -> {
            try {
                Log.d(TAG, "üîß ÂÅúÊ≠¢ÂΩïÂà∂Á∫øÁ®ãÂêØÂä®");
                Log.d(TAG, "üîß Ë∞ÉÁî® native stopRtspRecording");
                
                boolean result = false;
                if (mainActivity != null) {
                    result = mainActivity.stopRtspRecording();
                    Log.d(TAG, "üîß native stopRtspRecording ÁªìÊûú: " + result);
                } else {
                    Log.e(TAG, "üîß mainActivity ‰∏∫Á©∫");
                }
                
                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
                final boolean finalResult = result;
                mainHandler.post(() -> {
                    Log.d(TAG, "üîß ÂÅúÊ≠¢ÂΩïÂà∂ÂÆåÊàêÔºåÁªìÊûú: " + finalResult);
                    isRecording = false; // Âº∫Âà∂ËÆæÁΩÆ‰∏∫false
                    
                    if (finalResult) {
                        if (listener != null) {
                            listener.onRecordingStopped();
                        }
                    } else {
                        if (listener != null) {
                            listener.onError("ÂΩïÂà∂ÂÅúÊ≠¢Â§±Ë¥•Ôºå‰ΩÜÂ∑≤Âº∫Âà∂ÂÅúÊ≠¢");
                        }
                    }
                });
                
            } catch (Exception e) {
                Log.e(TAG, "üîß stopRtspRecording ÂºÇÂ∏∏: " + e.getMessage(), e);
                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
                mainHandler.post(() -> {
                    isRecording = false; // Âº∫Âà∂ËÆæÁΩÆ‰∏∫false
                    if (listener != null) {
                        listener.onError("ÂΩïÂà∂ÂÅúÊ≠¢ÂºÇÂ∏∏: " + e.getMessage());
                    }
                });
            }
        }).start();
    }
    
    /**
     * ÂÖ≥Èó≠RTSPÊµÅ
     */
    public void closeStream() {
        isPlaying = false;
        stopFrameProcessing();
        
        if (isRecording) {
            stopRecording();
        }
        
        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... voids) {
                if (mainActivity != null) {
                    mainActivity.closeRtspStream();
                }
                return null;
            }
            
            @Override
            protected void onPostExecute(Void aVoid) {
                if (listener != null) {
                    listener.onStreamClosed();
                }
            }
        }.execute();
    }
    
    /**
     * ÂºÄÂßãÂ∏ßÂ§ÑÁêÜÂæ™ÁéØ
     */
    private void startFrameProcessing() {
        if (frameTask != null) {
            frameTask.cancel(true);
        }
        
        frameTask = new FrameProcessTask();
        frameTask.execute();
    }
    
    /**
     * ÂÅúÊ≠¢Â∏ßÂ§ÑÁêÜÂæ™ÁéØ
     */
    private void stopFrameProcessing() {
        if (frameTask != null) {
            frameTask.cancel(true);
            frameTask = null;
        }
    }
    
    /**
     * Â∏ßÂ§ÑÁêÜÂºÇÊ≠•‰ªªÂä°
     */
    private class FrameProcessTask extends AsyncTask<Void, Void, Void> {
        @Override
        protected Void doInBackground(Void... voids) {
            while (isPlaying && !isCancelled()) {
                try {
                    boolean success = mainActivity != null ? mainActivity.processRtspFrame() : false;
                    
                    if (success) {
                        mainHandler.post(() -> {
                            if (listener != null) {
                                listener.onFrameProcessed();
                            }
                        });
                        
                        Thread.sleep(5);
                    } else {
                        break;
                    }
                } catch (InterruptedException e) {
                    break;
                } catch (Exception e) {
                    break;
                }
            }
            
            return null;
        }
        
        @Override
        protected void onPostExecute(Void aVoid) {
            if (listener != null && isPlaying) {
                listener.onError("RTSPÊµÅÂ§ÑÁêÜÁªìÊùü");
            }
        }
    }
    
    // Ëé∑ÂèñÊí≠ÊîæÁä∂ÊÄÅ
    public boolean isPlaying() {
        return isPlaying;
    }
    
    // Ëé∑ÂèñÂΩïÂà∂Áä∂ÊÄÅ
    public boolean isRecording() {
        return isRecording;
    }
    
    // Ëé∑ÂèñÊµÅ‰ø°ÊÅØ
    public String getStreamInfo() {
        if (isPlaying && mainActivity != null) {
            return mainActivity.getRtspStreamInfo();
        }
        return "RTSPÊµÅÊú™ÊâìÂºÄ";
    }
    
    // Êèê‰æõÁªôMainActivityË∞ÉÁî®ÁöÑÊñπÊ≥ï
    public boolean processRtspFrame() {
        return mainActivity != null ? mainActivity.processRtspFrame() : false;
    }
    
    private boolean writeBasicMp4Header(java.io.File file) {
        try (java.io.FileOutputStream fos = new java.io.FileOutputStream(file)) {
            writeFtypBox(fos);
            writeMdatBoxHeader(fos);
            fos.flush();
            return true;
        } catch (java.io.IOException e) {
            return false;
        }
    }
    
    private void writeFtypBox(java.io.FileOutputStream fos) throws java.io.IOException {
        writeUInt32BE(fos, 32);           // boxÂ§ßÂ∞è
        writeUInt32BE(fos, 0x66747970);   // 'ftyp'
        writeUInt32BE(fos, 0x69736F6D);   // 'isom'
        writeUInt32BE(fos, 0x00000200);   // version
        writeUInt32BE(fos, 0x69736F6D);   // 'isom'
        writeUInt32BE(fos, 0x69736F32);   // 'iso2'
        writeUInt32BE(fos, 0x61766331);   // 'avc1'
        writeUInt32BE(fos, 0x6D703431);   // 'mp41'
    }
    
    private void writeMdatBoxHeader(java.io.FileOutputStream fos) throws java.io.IOException {
        writeUInt32BE(fos, 8);            // ‰∏¥Êó∂Â§ßÂ∞è
        writeUInt32BE(fos, 0x6D646174);   // 'mdat'
    }
    
    private void writeUInt32BE(java.io.FileOutputStream fos, int value) throws java.io.IOException {
        byte[] bytes = new byte[4];
        bytes[0] = (byte) ((value >> 24) & 0xFF);
        bytes[1] = (byte) ((value >> 16) & 0xFF);
        bytes[2] = (byte) ((value >> 8) & 0xFF);
        bytes[3] = (byte) (value & 0xFF);
        fos.write(bytes);
    }
} 